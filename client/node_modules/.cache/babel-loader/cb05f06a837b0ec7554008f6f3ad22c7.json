{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _helpers = require('../helpers');\n\nvar getPageData = function getPageData(request) {\n  // this method can be replaced in case other content than html is expected to be received from server\n  // this function should always return {title, pageClass, originalContent, blocks, responseURL}\n  // in case page has invalid structure - return null\n  var html = request.responseText;\n  var pageObject = (0, _helpers.getDataFromHtml)(html, this.options.containers);\n\n  if (pageObject) {\n    pageObject.responseURL = request.responseURL ? request.responseURL : window.location.href;\n  } else {\n    console.warn('Received page is invalid.');\n    return null;\n  }\n\n  return pageObject;\n};\n\nexports.default = getPageData;","map":{"version":3,"sources":["/home/wan/Dropbox/Projects/react_proj_chat_app/client/node_modules/swup/lib/modules/getPageData.js"],"names":["Object","defineProperty","exports","value","_helpers","require","getPageData","request","html","responseText","pageObject","getDataFromHtml","options","containers","responseURL","window","location","href","console","warn","default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC5CC,EAAAA,KAAK,EAAE;AADqC,CAA7C;;AAIA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAIC,WAAW,GAAG,SAASA,WAAT,CAAqBC,OAArB,EAA8B;AAC/C;AACA;AACA;AACA,MAAIC,IAAI,GAAGD,OAAO,CAACE,YAAnB;AACA,MAAIC,UAAU,GAAG,CAAC,GAAGN,QAAQ,CAACO,eAAb,EAA8BH,IAA9B,EAAoC,KAAKI,OAAL,CAAaC,UAAjD,CAAjB;;AAEA,MAAIH,UAAJ,EAAgB;AACfA,IAAAA,UAAU,CAACI,WAAX,GAAyBP,OAAO,CAACO,WAAR,GAAsBP,OAAO,CAACO,WAA9B,GAA4CC,MAAM,CAACC,QAAP,CAAgBC,IAArF;AACA,GAFD,MAEO;AACNC,IAAAA,OAAO,CAACC,IAAR,CAAa,2BAAb;AACA,WAAO,IAAP;AACA;;AAED,SAAOT,UAAP;AACA,CAfD;;AAiBAR,OAAO,CAACkB,OAAR,GAAkBd,WAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _helpers = require('../helpers');\n\nvar getPageData = function getPageData(request) {\n\t// this method can be replaced in case other content than html is expected to be received from server\n\t// this function should always return {title, pageClass, originalContent, blocks, responseURL}\n\t// in case page has invalid structure - return null\n\tvar html = request.responseText;\n\tvar pageObject = (0, _helpers.getDataFromHtml)(html, this.options.containers);\n\n\tif (pageObject) {\n\t\tpageObject.responseURL = request.responseURL ? request.responseURL : window.location.href;\n\t} else {\n\t\tconsole.warn('Received page is invalid.');\n\t\treturn null;\n\t}\n\n\treturn pageObject;\n};\n\nexports.default = getPageData;"]},"metadata":{},"sourceType":"script"}