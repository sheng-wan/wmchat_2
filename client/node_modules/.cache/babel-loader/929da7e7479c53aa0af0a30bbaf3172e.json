{"ast":null,"code":"import _slicedToArray from \"/home/wan/Dropbox/Projects/react_proj_chat_app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/wan/Dropbox/Projects/react_proj_chat_app/client/src/components/Chat/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Chat.css';\nimport Infobar from '../InfoBar/Infobar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport TextContainer from '../TextContainer/TextContainer';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        room = _useState4[0],\n        setRoom = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        users = _useState6[0],\n        setUsers = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        message = _useState8[0],\n        setMessage = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        messages = _useState10[0],\n        setMessages = _useState10[1];\n\n  const ENDPOINT = 'localhost:8000';\n  useEffect(() => {\n    const _queryString$parse = queryString.parse(location.search),\n          name = _queryString$parse.name,\n          room = _queryString$parse.room;\n\n    socket = io(ENDPOINT);\n    setRoom(room);\n    setName(name);\n    socket.emit('join', {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    // handle message\n    socket.on('message', message => {\n      // listen for message event\n      setMessages([...messages, message]); // take the message send by admin or otehrs, will be set into the messages state\n    });\n    socket.on('roomData', ({\n      users\n    }) => {\n      setUsers(users);\n    });\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [messages]); // reload on when messages change\n\n  const sendMessage = event => {\n    // handle send message\n    event.preventDefault();\n\n    if (message) {\n      // if there is message\n      socket.emit('sendMessage', message, () => setMessage('')); // socket will emit the message to the backend - send the message back - then clear the message\n    }\n  };\n\n  console.log(message, messages);\n  return React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Infobar, {\n    room: room,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(Messages, {\n    messages: messages,\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  })), React.createElement(TextContainer, {\n    user: users,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/home/wan/Dropbox/Projects/react_proj_chat_app/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","Infobar","Input","Messages","TextContainer","socket","Chat","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","error","alert","on","off","sendMessage","event","preventDefault","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n\nimport './Chat.css';\nimport Infobar from '../InfoBar/Infobar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport TextContainer from '../TextContainer/TextContainer';\n\nlet socket;\n\nconst Chat = ({ location }) => {\n  const [ name, setName ] = useState('');\n  const [ room, setRoom ] = useState('');\n  const [ users, setUsers ] = useState('');\n  const [ message, setMessage ] = useState('');\n  const [ messages, setMessages ] = useState([]);\n  const ENDPOINT = 'localhost:8000';\n\n\n  useEffect(() => {\n    const { name, room } = queryString.parse(location.search);\n\n    socket = io(ENDPOINT);\n\n    setRoom(room);\n    setName(name)\n\n    socket.emit('join', { name, room }, (error) => {\n      if(error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT, location.search]);\n\n\n  useEffect(() => {  // handle message\n    socket.on('message', (message) => {      // listen for message event\n      setMessages([...messages, message ]);  // take the message send by admin or otehrs, will be set into the messages state\n    });\n\n    socket.on('roomData', ({ users }) => {\n      setUsers(users);\n    })\n\n    return () => {\n      socket.emit('disconnect');\n\n      socket.off();\n    }\n    \n  }, [messages])  // reload on when messages change\n\n\n  const sendMessage = event => { // handle send message\n    event.preventDefault();\n  \n    if(message) {  // if there is message\n      socket.emit('sendMessage', message, () => setMessage(''));  // socket will emit the message to the backend - send the message back - then clear the message\n    }\n  }\n\n  console.log(message, messages);\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n        <Infobar room={room}/>\n        <Messages messages={messages} name={name}/>\n        <Input message={ message } setMessage={ setMessage } sendMessage = { sendMessage }/>\n      </div>\n      <TextContainer user={users}/>\n    </div>\n  )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}