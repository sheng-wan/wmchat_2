{"ast":null,"code":"import _toConsumableArray from\"/home/wan/Dropbox/Projects/react_proj_chat_app/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/wan/Dropbox/Projects/react_proj_chat_app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import queryString from'query-string';import io from'socket.io-client';import'./Chat.css';import InfoBar from'../InfoBar/InfoBar';import Input from'../Input/Input';import Messages from'../Messages/Messages';import TextContainer from'../TextContainer/TextContainer';var socket;var Chat=function Chat(_ref){var location=_ref.location;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),name=_useState2[0],setName=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),room=_useState4[0],setRoom=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),users=_useState6[0],setUsers=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),message=_useState8[0],setMessage=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),messages=_useState10[0],setMessages=_useState10[1];var ENDPOINT='localhost:8000';useEffect(function(){var _queryString$parse=queryString.parse(location.search),name=_queryString$parse.name,room=_queryString$parse.room;socket=io(ENDPOINT);setRoom(room);setName(name);socket.emit('join',{name:name,room:room},function(error){if(error){alert(error);}});},[ENDPOINT,location.search]);useEffect(function(){// handle message\nsocket.on('message',function(message){// listen for message event\nsetMessages([].concat(_toConsumableArray(messages),[message]));// take the message send by admin or otehrs, will be set into the messages state\n});socket.on('roomData',function(_ref2){var users=_ref2.users;setUsers(users);});return function(){socket.emit('disconnect');socket.off();};},[messages]);// reload on when messages change\nvar sendMessage=function sendMessage(event){// handle send message\nevent.preventDefault();if(message){// if there is message\nsocket.emit('sendMessage',message,function(){return setMessage('');});// socket will emit the message to the backend - send the message back - then clear the message\n}};// console.log(message, messages);\nreturn React.createElement(\"div\",{className:\"outerContainer\"},React.createElement(\"div\",{className:\"container\"},React.createElement(InfoBar,{room:room}),React.createElement(Messages,{messages:messages,name:name}),React.createElement(Input,{message:message,setMessage:setMessage,sendMessage:sendMessage})),React.createElement(TextContainer,{users:users}));};export default Chat;","map":{"version":3,"sources":["/home/wan/Dropbox/Projects/react_proj_chat_app/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","InfoBar","Input","Messages","TextContainer","socket","Chat","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","error","alert","on","off","sendMessage","event","preventDefault"],"mappings":"wRAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,WAAP,KAAwB,cAAxB,CACA,MAAOC,CAAAA,EAAP,KAAe,kBAAf,CAEA,MAAO,YAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,oBAApB,CACA,MAAOC,CAAAA,KAAP,KAAkB,gBAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,sBAArB,CACA,MAAOC,CAAAA,aAAP,KAA0B,gCAA1B,CAEA,GAAIC,CAAAA,MAAJ,CAEA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,eACHV,QAAQ,CAAC,EAAD,CADL,wCACrBW,IADqB,eACfC,OADe,8BAEHZ,QAAQ,CAAC,EAAD,CAFL,yCAErBa,IAFqB,eAEfC,OAFe,8BAGDd,QAAQ,CAAC,EAAD,CAHP,yCAGrBe,KAHqB,eAGdC,QAHc,8BAIGhB,QAAQ,CAAC,EAAD,CAJX,yCAIrBiB,OAJqB,eAIZC,UAJY,8BAKKlB,QAAQ,CAAC,EAAD,CALb,0CAKrBmB,QALqB,gBAKXC,WALW,gBAM7B,GAAMC,CAAAA,QAAQ,CAAG,gBAAjB,CAGApB,SAAS,CAAC,UAAM,wBACSC,WAAW,CAACoB,KAAZ,CAAkBZ,QAAQ,CAACa,MAA3B,CADT,CACNZ,IADM,oBACNA,IADM,CACAE,IADA,oBACAA,IADA,CAGdL,MAAM,CAAGL,EAAE,CAACkB,QAAD,CAAX,CAEAP,OAAO,CAACD,IAAD,CAAP,CACAD,OAAO,CAACD,IAAD,CAAP,CAEAH,MAAM,CAACgB,IAAP,CAAY,MAAZ,CAAoB,CAAEb,IAAI,CAAJA,IAAF,CAAQE,IAAI,CAAJA,IAAR,CAApB,CAAoC,SAACY,KAAD,CAAW,CAC7C,GAAGA,KAAH,CAAU,CACRC,KAAK,CAACD,KAAD,CAAL,CACD,CACF,CAJD,EAKD,CAbQ,CAaN,CAACJ,QAAD,CAAWX,QAAQ,CAACa,MAApB,CAbM,CAAT,CAgBAtB,SAAS,CAAC,UAAM,CAAG;AACjBO,MAAM,CAACmB,EAAP,CAAU,SAAV,CAAqB,SAACV,OAAD,CAAa,CAAO;AACvCG,WAAW,8BAAKD,QAAL,GAAeF,OAAf,GAAX,CAAuC;AACxC,CAFD,EAIAT,MAAM,CAACmB,EAAP,CAAU,UAAV,CAAsB,eAAe,IAAZZ,CAAAA,KAAY,OAAZA,KAAY,CACnCC,QAAQ,CAACD,KAAD,CAAR,CACD,CAFD,EAIA,MAAO,WAAM,CACXP,MAAM,CAACgB,IAAP,CAAY,YAAZ,EAEAhB,MAAM,CAACoB,GAAP,GACD,CAJD,CAMD,CAfQ,CAeN,CAACT,QAAD,CAfM,CAAT,CAegB;AAGhB,GAAMU,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAAE;AAC/BA,KAAK,CAACC,cAAN,GAEA,GAAGd,OAAH,CAAY,CAAG;AACbT,MAAM,CAACgB,IAAP,CAAY,aAAZ,CAA2BP,OAA3B,CAAoC,iBAAMC,CAAAA,UAAU,CAAC,EAAD,CAAhB,EAApC,EAA4D;AAC7D,CACF,CAND,CAQA;AAEA,MACE,4BAAK,SAAS,CAAC,gBAAf,EACE,2BAAK,SAAS,CAAC,WAAf,EACE,oBAAC,OAAD,EAAS,IAAI,CAAEL,IAAf,EADF,CAEE,oBAAC,QAAD,EAAU,QAAQ,CAAEM,QAApB,CAA8B,IAAI,CAAER,IAApC,EAFF,CAGE,oBAAC,KAAD,EAAO,OAAO,CAAEM,OAAhB,CAAyB,UAAU,CAAEC,UAArC,CAAiD,WAAW,CAAEW,WAA9D,EAHF,CADF,CAME,oBAAC,aAAD,EAAe,KAAK,CAAEd,KAAtB,EANF,CADF,CAUD,CA/DD,CAiEA,cAAeN,CAAAA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n\nimport './Chat.css';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport TextContainer from '../TextContainer/TextContainer';\n\nlet socket;\n\nconst Chat = ({ location }) => {\n  const [ name, setName ] = useState('');\n  const [ room, setRoom ] = useState('');\n  const [ users, setUsers ] = useState('');\n  const [ message, setMessage ] = useState('');\n  const [ messages, setMessages ] = useState([]);\n  const ENDPOINT = 'localhost:8000';\n\n\n  useEffect(() => {\n    const { name, room } = queryString.parse(location.search);\n\n    socket = io(ENDPOINT);\n\n    setRoom(room);\n    setName(name)\n\n    socket.emit('join', { name, room }, (error) => {\n      if(error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT, location.search]);\n\n\n  useEffect(() => {  // handle message\n    socket.on('message', (message) => {      // listen for message event\n      setMessages([...messages, message ]);  // take the message send by admin or otehrs, will be set into the messages state\n    });\n\n    socket.on('roomData', ({ users }) => {\n      setUsers(users);\n    })\n\n    return () => {\n      socket.emit('disconnect');\n\n      socket.off();\n    }\n\n  }, [messages])  // reload on when messages change\n\n\n  const sendMessage = (event) => { // handle send message\n    event.preventDefault();\n  \n    if(message) {  // if there is message\n      socket.emit('sendMessage', message, () => setMessage(''));  // socket will emit the message to the backend - send the message back - then clear the message\n    }\n  }\n\n  // console.log(message, messages);\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n        <InfoBar room={room} />\n        <Messages messages={messages} name={name} />\n        <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n      </div>\n      <TextContainer users={users}/>\n    </div>\n  );\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}