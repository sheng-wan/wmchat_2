{"ast":null,"code":"import _slicedToArray from \"/home/wan/Dropbox/projects/react_wmchat/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/wan/Dropbox/projects/react_wmchat/client/src/components/Chat/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Chat.css';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport TextContainer from '../TextContainer/TextContainer';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        room = _useState4[0],\n        setRoom = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        users = _useState6[0],\n        setUsers = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        message = _useState8[0],\n        setMessage = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        messages = _useState10[0],\n        setMessages = _useState10[1];\n\n  const ENDPOINT = 'localhost:8000';\n  useEffect(() => {\n    const _queryString$parse = queryString.parse(location.search),\n          name = _queryString$parse.name,\n          room = _queryString$parse.room;\n\n    socket = io(ENDPOINT);\n    setRoom(room);\n    setName(name);\n    socket.emit('join', {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    // handle message\n    socket.on('message', message => {\n      // listen for message event\n      setMessages([...messages, message]); // take the message send by admin or otehrs, will be set into the messages state\n    });\n    socket.on('roomData', ({\n      users\n    }) => {\n      setUsers(users);\n    });\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [messages]); // reload on when messages change\n\n  const sendMessage = event => {\n    // handle send message\n    event.preventDefault();\n\n    if (message) {\n      // if there is message\n      socket.emit('sendMessage', message, () => setMessage('')); // socket will emit the message to the backend - send the message back - then clear the message\n    }\n  }; // console.log(message, messages);\n\n\n  return React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(InfoBar, {\n    room: room,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), \" \", React.createElement(Messages, {\n    messages: messages,\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), \" \", React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), \" \"), \" \", React.createElement(TextContainer, {\n    users: users,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), \" \");\n};\n\nexport default Chat;","map":{"version":3,"sources":["/home/wan/Dropbox/projects/react_wmchat/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","InfoBar","Input","Messages","TextContainer","socket","Chat","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","error","alert","on","off","sendMessage","event","preventDefault"],"mappings":";;AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,SAFF,QAGO,OAHP;AAIA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,OAAO,YAAP;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AACZC,EAAAA;AADY,CAAD,KAEP;AAAA,oBACoBV,QAAQ,CAAC,EAAD,CAD5B;AAAA;AAAA,QACGW,IADH;AAAA,QACSC,OADT;;AAAA,qBAEoBZ,QAAQ,CAAC,EAAD,CAF5B;AAAA;AAAA,QAEGa,IAFH;AAAA,QAESC,OAFT;;AAAA,qBAGsBd,QAAQ,CAAC,EAAD,CAH9B;AAAA;AAAA,QAGGe,KAHH;AAAA,QAGUC,QAHV;;AAAA,qBAI0BhB,QAAQ,CAAC,EAAD,CAJlC;AAAA;AAAA,QAIGiB,OAJH;AAAA,QAIYC,UAJZ;;AAAA,qBAK4BlB,QAAQ,CAAC,EAAD,CALpC;AAAA;AAAA,QAKGmB,QALH;AAAA,QAKaC,WALb;;AAMJ,QAAMC,QAAQ,GAAG,gBAAjB;AAGApB,EAAAA,SAAS,CAAC,MAAM;AAAA,+BAIVC,WAAW,CAACoB,KAAZ,CAAkBZ,QAAQ,CAACa,MAA3B,CAJU;AAAA,UAEZZ,IAFY,sBAEZA,IAFY;AAAA,UAGZE,IAHY,sBAGZA,IAHY;;AAMdL,IAAAA,MAAM,GAAGL,EAAE,CAACkB,QAAD,CAAX;AAEAP,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAD,IAAAA,OAAO,CAACD,IAAD,CAAP;AAEAH,IAAAA,MAAM,CAACgB,IAAP,CAAY,MAAZ,EAAoB;AAClBb,MAAAA,IADkB;AAElBE,MAAAA;AAFkB,KAApB,EAGIY,KAAD,IAAW;AACZ,UAAIA,KAAJ,EAAW;AACTC,QAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF,KAPD;AAQD,GAnBQ,EAmBN,CAACJ,QAAD,EAAWX,QAAQ,CAACa,MAApB,CAnBM,CAAT;AAsBAtB,EAAAA,SAAS,CAAC,MAAM;AAAE;AAChBO,IAAAA,MAAM,CAACmB,EAAP,CAAU,SAAV,EAAsBV,OAAD,IAAa;AAAE;AAClCG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX,CADgC,CACK;AACtC,KAFD;AAIAT,IAAAA,MAAM,CAACmB,EAAP,CAAU,UAAV,EAAsB,CAAC;AACrBZ,MAAAA;AADqB,KAAD,KAEhB;AACJC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAJD;AAMA,WAAO,MAAM;AACXP,MAAAA,MAAM,CAACgB,IAAP,CAAY,YAAZ;AAEAhB,MAAAA,MAAM,CAACoB,GAAP;AACD,KAJD;AAMD,GAjBQ,EAiBN,CAACT,QAAD,CAjBM,CAAT,CA/BI,CAgDW;;AAGf,QAAMU,WAAW,GAAIC,KAAD,IAAW;AAAE;AAC/BA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAId,OAAJ,EAAa;AAAE;AACbT,MAAAA,MAAM,CAACgB,IAAP,CAAY,aAAZ,EAA2BP,OAA3B,EAAoC,MAAMC,UAAU,CAAC,EAAD,CAApD,EADW,CACgD;AAC5D;AACF,GAND,CAnDI,CA2DJ;;;AAEA,SAAS;AACH,IAAA,SAAS,EAAG,gBADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEP;AACI,IAAA,SAAS,EAAG,WADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEA,oBACA,OADA;AACQ,IAAA,IAAI,EACVL,IAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,OAMG,oBACH,QADG;AACM,IAAA,QAAQ,EACfM,QAFC;AAIH,IAAA,IAAI,EACFR,IALC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANH,OAaG,oBACH,KADG;AACG,IAAA,OAAO,EACXM,OAFC;AAIH,IAAA,UAAU,EACRC,UALC;AAOH,IAAA,WAAW,EACTW,WARC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbH,MAFO,OA0BD,oBACN,aADM;AACQ,IAAA,KAAK,EACjBd,KAFI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BC,MAAT;AAiCD,CAhGD;;AAkGA,eAAeN,IAAf","sourcesContent":["import React, {\n  useState,\n  useEffect\n} from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n\nimport './Chat.css';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport TextContainer from '../TextContainer/TextContainer';\n\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = 'localhost:8000';\n\n\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n\n    socket = io(ENDPOINT);\n\n    setRoom(room);\n    setName(name)\n\n    socket.emit('join', {\n      name,\n      room\n    }, (error) => {\n      if (error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT, location.search]);\n\n\n  useEffect(() => { // handle message\n    socket.on('message', (message) => { // listen for message event\n      setMessages([...messages, message]); // take the message send by admin or otehrs, will be set into the messages state\n    });\n\n    socket.on('roomData', ({\n      users\n    }) => {\n      setUsers(users);\n    })\n\n    return () => {\n      socket.emit('disconnect');\n\n      socket.off();\n    }\n\n  }, [messages]) // reload on when messages change\n\n\n  const sendMessage = (event) => { // handle send message\n    event.preventDefault();\n\n    if (message) { // if there is message\n      socket.emit('sendMessage', message, () => setMessage('')); // socket will emit the message to the backend - send the message back - then clear the message\n    }\n  }\n\n  // console.log(message, messages);\n\n  return ( <\n    div className = \"outerContainer\" >\n    <\n    div className = \"container\" >\n    <\n    InfoBar room = {\n      room\n    }\n    /> <\n    Messages messages = {\n      messages\n    }\n    name = {\n      name\n    }\n    /> <\n    Input message = {\n      message\n    }\n    setMessage = {\n      setMessage\n    }\n    sendMessage = {\n      sendMessage\n    }\n    /> <\n    /div> <\n    TextContainer users = {\n      users\n    }\n    /> <\n    /div>\n  );\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}