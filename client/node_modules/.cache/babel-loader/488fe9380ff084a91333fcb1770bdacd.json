{"ast":null,"code":"import _slicedToArray from \"/home/wan/Dropbox/Projects/react_proj_chat_app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/wan/Dropbox/Projects/react_proj_chat_app/client/src/components/Chat/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Chat.css';\nimport Infobar from '../infoBar/Infobar';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        room = _useState4[0],\n        setRoom = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        users = _useState6[0],\n        setUsers = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        message = _useState8[0],\n        setMessage = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        messages = _useState10[0],\n        setMessages = _useState10[1];\n\n  const ENDPOINT = 'localhost:8000';\n  useEffect(() => {\n    const _queryString$parse = queryString.parse(location.search),\n          name = _queryString$parse.name,\n          room = _queryString$parse.room;\n\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room);\n    socket.emit('join', {\n      name,\n      room\n    }, () => {});\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    // handle message\n    socket.on('message', message => {\n      // listen for message event\n      setMessages([...messages, message]); // take the message send by admin or otehrs, will be set into the messages state\n    });\n  }, [messages]); // reload on when messages change\n\n  const sendMessage = e => {\n    // handle send message\n    e.preventDefault();\n\n    if (message) {\n      // if there is message\n      socket.emit('sendMessage', message, () => setMessage('')); // socket will emit the message to the backend - send the message back - then clear the message\n    }\n  };\n\n  console.log(message, messages);\n  return React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Infobar, {\n    room: room,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    value: message,\n    onChange: e => setMessage(e.target.value),\n    onKeyPress: e => e.key === 'Enter' ? sendMessage(e) : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/home/wan/Dropbox/Projects/react_proj_chat_app/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","Infobar","socket","Chat","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","off","on","sendMessage","e","preventDefault","console","log","target","value","key"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,OAAO,YAAP;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA,oBACHP,QAAQ,CAAC,EAAD,CADL;AAAA;AAAA,QACrBQ,IADqB;AAAA,QACfC,OADe;;AAAA,qBAEHT,QAAQ,CAAC,EAAD,CAFL;AAAA;AAAA,QAErBU,IAFqB;AAAA,QAEfC,OAFe;;AAAA,qBAGDX,QAAQ,CAAC,EAAD,CAHP;AAAA;AAAA,QAGrBY,KAHqB;AAAA,QAGdC,QAHc;;AAAA,qBAIGb,QAAQ,CAAC,EAAD,CAJX;AAAA;AAAA,QAIrBc,OAJqB;AAAA,QAIZC,UAJY;;AAAA,qBAKKf,QAAQ,CAAC,EAAD,CALb;AAAA;AAAA,QAKrBgB,QALqB;AAAA,QAKXC,WALW;;AAM7B,QAAMC,QAAQ,GAAG,gBAAjB;AAGAjB,EAAAA,SAAS,CAAC,MAAM;AAAA,+BACSC,WAAW,CAACiB,KAAZ,CAAkBZ,QAAQ,CAACa,MAA3B,CADT;AAAA,UACNZ,IADM,sBACNA,IADM;AAAA,UACAE,IADA,sBACAA,IADA;;AAGdL,IAAAA,MAAM,GAAGF,EAAE,CAACe,QAAD,CAAX;AAEAT,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AAEAL,IAAAA,MAAM,CAACgB,IAAP,CAAY,MAAZ,EAAoB;AAAEb,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAApB,EAAoC,MAAM,CACzC,CADD;AAGA,WAAO,MAAM;AACXL,MAAAA,MAAM,CAACgB,IAAP,CAAY,YAAZ;AAEAhB,MAAAA,MAAM,CAACiB,GAAP;AACD,KAJD;AAKD,GAhBQ,EAgBN,CAACJ,QAAD,EAAWX,QAAQ,CAACa,MAApB,CAhBM,CAAT;AAmBAnB,EAAAA,SAAS,CAAC,MAAM;AAAG;AACjBI,IAAAA,MAAM,CAACkB,EAAP,CAAU,SAAV,EAAsBT,OAAD,IAAa;AAAG;AACnCG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX,CADgC,CACO;AACxC,KAFD;AAID,GALQ,EAKN,CAACE,QAAD,CALM,CAAT,CA5B6B,CAiCb;;AAGhB,QAAMQ,WAAW,GAAGC,CAAC,IAAI;AAAE;AACzBA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAGZ,OAAH,EAAY;AAAG;AACbT,MAAAA,MAAM,CAACgB,IAAP,CAAY,aAAZ,EAA2BP,OAA3B,EAAoC,MAAMC,UAAU,CAAC,EAAD,CAApD,EADU,CACkD;AAC7D;AACF,GAND;;AAQAY,EAAAA,OAAO,CAACC,GAAR,CAAYd,OAAZ,EAAqBE,QAArB;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAEN,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AACE,IAAA,KAAK,EAAEI,OADT;AAEE,IAAA,QAAQ,EAAEW,CAAC,IAAIV,UAAU,CAACU,CAAC,CAACI,MAAF,CAASC,KAAV,CAF3B;AAGQ,IAAA,UAAU,EAAEL,CAAC,IAAIA,CAAC,CAACM,GAAF,KAAU,OAAV,GAAoBP,WAAW,CAACC,CAAD,CAA/B,GAAqC,IAH9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF;AAYD,CA1DD;;AA4DA,eAAenB,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n\nimport './Chat.css';\nimport Infobar from '../infoBar/Infobar';\n\nlet socket;\n\nconst Chat = ({ location }) => {\n  const [ name, setName ] = useState('');\n  const [ room, setRoom ] = useState('');\n  const [ users, setUsers ] = useState('');\n  const [ message, setMessage ] = useState('');\n  const [ messages, setMessages ] = useState([]);\n  const ENDPOINT = 'localhost:8000';\n\n\n  useEffect(() => {\n    const { name, room } = queryString.parse(location.search);\n    \n    socket = io(ENDPOINT);\n\n    setName(name);\n    setRoom(room);\n\n    socket.emit('join', { name, room }, () => {\n    });\n\n    return () => {\n      socket.emit('disconnect');\n\n      socket.off();\n    }\n  }, [ENDPOINT, location.search]);\n\n\n  useEffect(() => {  // handle message\n    socket.on('message', (message) => {  // listen for message event\n      setMessages([...messages, message ]);  // take the message send by admin or otehrs, will be set into the messages state\n    });\n\n  }, [messages])  // reload on when messages change\n\n\n  const sendMessage = e => { // handle send message\n    e.preventDefault();\n  \n    if(message) {  // if there is message\n      socket.emit('sendMessage', message, () => setMessage(''));  // socket will emit the message to the backend - send the message back - then clear the message\n    }\n  }\n\n  console.log(message, messages);\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n        <Infobar room={room}/>\n        <input\n          value={message} \n          onChange={e => setMessage(e.target.value)} \n                onKeyPress={e => e.key === 'Enter' ? sendMessage(e) : null}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}