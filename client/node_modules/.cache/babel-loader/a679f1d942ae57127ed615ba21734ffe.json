{"ast":null,"code":"import _slicedToArray from \"/home/wan/Dropbox/projects/react_wmchat/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/wan/Dropbox/projects/react_wmchat/client/src/components/Chat/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Chat.css';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport TextContainer from '../TextContainer/TextContainer';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        room = _useState4[0],\n        setRoom = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        users = _useState6[0],\n        setUsers = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        message = _useState8[0],\n        setMessage = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        messages = _useState10[0],\n        setMessages = _useState10[1];\n\n  const ENDPOINT = 'localhost:8000';\n  useEffect(() => {\n    const _queryString$parse = queryString.parse(location.search),\n          name = _queryString$parse.name,\n          room = _queryString$parse.room;\n\n    socket = io(ENDPOINT);\n    setRoom(room);\n    setName(name);\n    socket.emit('join', {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    // handle message\n    socket.on('message', message => {\n      // listen for message event\n      setMessages([...messages, message]); // take the message send by admin or otehrs, will be set into the messages state\n    });\n    socket.on('roomData', ({\n      users\n    }) => {\n      setUsers(users);\n    });\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [messages]); // reload on when messages change\n\n  const sendMessage = event => {\n    // handle send message\n    event.preventDefault();\n\n    if (message) {\n      // if there is message\n      socket.emit('sendMessage', message, () => setMessage('')); // socket will emit the message to the backend - send the message back - then clear the message\n    }\n  }; // console.log(message, messages);\n\n\n  return React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(InfoBar, {\n    room: room,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), \" \", React.createElement(Messages, {\n    messages: messages,\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), ' ', React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), ' '), ' ', React.createElement(TextContainer, {\n    users: users,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), ' ');\n};\n\nexport default Chat;","map":{"version":3,"sources":["/home/wan/Dropbox/projects/react_wmchat/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","InfoBar","Input","Messages","TextContainer","socket","Chat","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","error","alert","on","off","sendMessage","event","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n\nimport './Chat.css';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport TextContainer from '../TextContainer/TextContainer';\n\nlet socket;\n\nconst Chat = ({ location }) => {\n\tconst [name, setName] = useState('');\n\tconst [room, setRoom] = useState('');\n\tconst [users, setUsers] = useState('');\n\tconst [message, setMessage] = useState('');\n\tconst [messages, setMessages] = useState([]);\n\tconst ENDPOINT = 'localhost:8000';\n\n\tuseEffect(() => {\n\t\tconst { name, room } = queryString.parse(location.search);\n\n\t\tsocket = io(ENDPOINT);\n\n\t\tsetRoom(room);\n\t\tsetName(name);\n\n\t\tsocket.emit(\n\t\t\t'join',\n\t\t\t{\n\t\t\t\tname,\n\t\t\t\troom,\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\tif (error) {\n\t\t\t\t\talert(error);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}, [ENDPOINT, location.search]);\n\n\tuseEffect(() => {\n\t\t// handle message\n\t\tsocket.on('message', (message) => {\n\t\t\t// listen for message event\n\t\t\tsetMessages([...messages, message]); // take the message send by admin or otehrs, will be set into the messages state\n\t\t});\n\n\t\tsocket.on('roomData', ({ users }) => {\n\t\t\tsetUsers(users);\n\t\t});\n\n\t\treturn () => {\n\t\t\tsocket.emit('disconnect');\n\n\t\t\tsocket.off();\n\t\t};\n\t}, [messages]); // reload on when messages change\n\n\tconst sendMessage = (event) => {\n\t\t// handle send message\n\t\tevent.preventDefault();\n\n\t\tif (message) {\n\t\t\t// if there is message\n\t\t\tsocket.emit('sendMessage', message, () => setMessage('')); // socket will emit the message to the backend - send the message back - then clear the message\n\t\t}\n\t};\n\n\t// console.log(message, messages);\n\n\treturn (\n\t\t<div className='outerContainer'>\n\t\t\t<div className='container'>\n\t\t\t\t<InfoBar room={room} /> <Messages messages={messages} name={name} />{' '}\n\t\t\t\t<Input\n\t\t\t\t\tmessage={message}\n\t\t\t\t\tsetMessage={setMessage}\n\t\t\t\t\tsendMessage={sendMessage}\n\t\t\t\t/>{' '}\n\t\t\t</div>{' '}\n\t\t\t<TextContainer users={users} />{' '}\n\t\t</div>\n\t);\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}